#!/usr/bin/env python

import sys
import logging
from boto.dynamodb2.exceptions import ItemNotFound
from squid_dynamodb.providers.dynamodb import DynamoDbAuthInfoProvider


class DynamoDbAuthHelper(object):

    def __init__(self):
        logging.basicConfig(format='%(asctime)s %(levelname)s %(module)s: %(message)s', datefmt='%d.%m.%Y %H:%M:%S',level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        self.proxy_config_table = DynamoDbAuthInfoProvider()

    def is_valid_credentials(self, basic_auth_credentials):
        if not basic_auth_credentials:
            return False

        try:
            user_config = self.proxy_config_table.get_user_config(basic_auth_credentials['username'])
            if user_config.get("Password") == basic_auth_credentials['password']:
                return True
            else:
                return False
        except ItemNotFound:
            self.logger.warn("User {0} not found!".format(basic_auth_credentials['username']))
            return False
        except Exception as e:
            self.logger.error("Could not get config from dynamodb. Error was: {0}".format(str(e)))
            return False

    #TODO: shall get a refactoring, bit ugly so far
    def parse_basic_auth_credentials(self, line):
        basic_auth_credentials = {}
        if not line:
            return None

        item_list = line.split(" ")

        if not len(item_list) == 2:
            self.logger.error("Error parsing basic-auth credentials, invalid format supplied!")
            return None

        basic_auth_credentials['username'] = item_list[0]
        basic_auth_credentials['password'] = item_list[1]

        return basic_auth_credentials

    def main_loop(self):
        while True:
            line = sys.stdin.readline()
            line = line.strip()

            basic_auth_credentials = self.parse_basic_auth_credentials(line)

            if self.is_valid_credentials(basic_auth_credentials):
                self.write_ok()
            else:
                self.write_error()

    @staticmethod
    def write_ok():
        sys.stdout.write('OK\n')
        sys.stdout.flush()

    @staticmethod
    def write_error():
        sys.stdout.write('ERR\n')
        sys.stdout.flush()

if __name__ == '__main__':
    authhelper = DynamoDbAuthHelper()
    authhelper.main_loop()